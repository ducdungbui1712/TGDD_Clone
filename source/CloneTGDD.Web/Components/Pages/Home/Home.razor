@page "/"
@inject ProductsApiClient ProductsApi
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@attribute [StreamRendering]
@* @attribute [OutputCache(Duration = 10)] *@

<PageTitle>Home</PageTitle>

<div class="custom-carousel">
    <div id="carouselBanner" class="carousel slide carousel-fade" data-bs-ride="carousel">
        <div class="carousel-inner">
            @for (int i = 0; i < bannerImages.Count; i++)
            {
                <div class="carousel-item @(i == 0 ? "active" : "")">
                    <img src="@bannerImages[i]" class="d-block w-100" alt="Banner @(i + 1)">
                </div>
            }
        </div>
        <ol class="carousel-indicators">
            @for (int i = 0; i < bannerImages.Count; i++)
            {
                <li data-bs-target="#carouselBanner" data-bs-slide-to="@i" class="@(i == 0 ? "active" : "")"></li>
            }
        </ol>
        <button class="carousel-control-prev btn shadow-none border-0" id="prevButton">
            <span class="carousel-control-prev-icon"></span>
        </button>
        <button class="carousel-control-next btn shadow-none border-0" id="nextButton">
            <span class="carousel-control-next-icon"></span>
        </button>
    </div>
</div>


@if (products.Any())
{
    @foreach (var categoryGroup in products.GroupBy(p => p.CategoryId))
    {
        <FluentStack Class="my-4" Orientation="Orientation.Vertical" HorizontalAlignment="HorizontalAlignment.Center">
            @{
                var categoryName = "";
                if (categoryGroup.Key == 1)
                {
                    categoryName = "Phone";
                }
                if (categoryGroup.Key == 2)
                {
                    categoryName = "Laptop";
                }
            }
            <h2 class="text-center category-heading mb-4">@categoryName.ToUpper()</h2>
            <FluentGrid>
                @foreach (var product in categoryGroup)
                {
                    <FluentGridItem xs="12" sm="6" md="3" Justify="JustifyContent.Center">
                        <FluentCard class="text-center product-container">
                            <FluentStack Orientation="Orientation.Vertical" HorizontalAlignment="HorizontalAlignment.Center" @onclick="()=>NavigateToDetailPage(product.Id)">
                                <img class="card-img-top w-30 img-fluid" src="@product.ImageUrl" alt="..." />
                                <div class="product-name">
                                    <h5 class="m-2">@product.Model</h5>
                                </div>
                                <strong class="m-2 price">
                                    <span>@product.BasePrice.ToString("C")</span>
                                </strong>

                                <FluentButton IconStart="@(new Icons.Regular.Size24.Cart())" OnClick="()=> NavigateToDetailPage(product.Id)">Mua ngay</FluentButton>
                            </FluentStack>
                        </FluentCard>
                    </FluentGridItem>
                }
            </FluentGrid>
        </FluentStack>
    }
}
else
{
    <h2>Loading</h2>
}

<style>
    .product-container {
        cursor: pointer;
        transition: transform .2s;
    }

        .product-container:hover {
            transform: scale(1.05);
        }

        .product-container img {
            max-width: 100%;
            height: auto;
            margin-bottom: 10px;
        }

    .product-name h5 {
        font-size: 1.1em;
        color: #333;
        font-weight: bold;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
    }

    .price {
        font-size: 1.2em;
    }

        .price span {
            color: #0078d4;
        }
</style>
@code {
    public List<ProductsDTO> products = new();
    public List<CategoryDTO> categories = new();
    public List<String> bannerImages = new();

    protected override async Task OnInitializedAsync()
    {
        ResponseDTO? ProductResponseDTO = await ProductsApi.GetProductsDTO();
        ResponseDTO? CategoryResponseDTO = await ProductsApi.GetCategoryDTO();

        if (ProductResponseDTO != null && ProductResponseDTO.IsSuccess)
        {
            products = JsonConvert.DeserializeObject<List<ProductsDTO>>(Convert.ToString(ProductResponseDTO.Result));
        }

        if (CategoryResponseDTO != null && CategoryResponseDTO.IsSuccess)
        {
            categories = JsonConvert.DeserializeObject<List<CategoryDTO>>(Convert.ToString(CategoryResponseDTO.Result));
            foreach (var category in categories)
            {
                bannerImages.AddRange(category.BannerUrl.Split("##").ToList());
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("bindCarouselControls");
        }
    }


    private void NavigateToDetailPage(int id)
    {
        NavigationManager.NavigateTo($"/Detail/{id}");
    }


    private void AddToCart(int productId)
    {
        // Add your logic for adding the product to the cart
        // You may want to use a service or communicate with your backend
    }
}
